Index: mflow_rest_api/rest_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mflow_rest_api/rest_client.py	(date 1487606915000)
+++ mflow_rest_api/rest_client.py	(revision )
@@ -2,6 +2,8 @@
 from urllib.parse import urljoin
 import requests
 
+from mflow_rest_api.rest_server import API_PATH
+
 
 def set_parameters(base_url, parameters):
     """
@@ -11,7 +13,7 @@
     :return: Response message.
     """
     headers = {'content-type': 'application/json'}
-    set_parameters_url = urljoin(base_url, "/parameters")
+    set_parameters_url = urljoin(base_url, API_PATH, "/parameters")
     response = requests.post(set_parameters_url,
                              data=json.dumps(parameters),
                              headers=headers).json()
Index: mflow_rest_api/rest_server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mflow_rest_api/rest_server.py	(date 1487606915000)
+++ mflow_rest_api/rest_server.py	(revision )
@@ -1,11 +1,14 @@
 import json
 import os
+import uuid
 from collections import OrderedDict
 from logging import getLogger
 from bottle import request, run, Bottle, static_file, response
 
 _logger = getLogger(__name__)
 
+API_PATH = "/api/v1/"
+
 
 def start_web_interface(process, host, port):
     """
@@ -18,39 +21,81 @@
     app = Bottle()
     static_root_path = os.path.join(os.path.dirname(__file__), "static")
     _logger.debug("Static files root folder: %s", static_root_path)
+    process_id = None
+
+    # Check if the provided token is valid.
+    def validate_guid(function):
+        def wrapper(guid):
+            if guid == process_id:
+                function()
+            else:
+                raise ValueError("Provided guid='%s' does not exist." % guid)
+        return wrapper
 
     @app.get("/")
     def index():
         return static_file(filename="index.html", root=static_root_path)
 
-    @app.get("/help")
+    @app.get(API_PATH)
+    def get_process_id():
+        return {"status": "ok",
+                "data": {"process_id": process_id}}
+
+    @app.put(API_PATH)
+    def start():
+        _logger.debug("Starting process.")
+        process.start()
+        global process_id
+        process_id = uuid.uuid1()
+        _logger.debug("New process_id='%s' set." % process_id)
+
+        return {"status": "ok",
+                "message": "Process started.",
+                "data": {"process_id": process_id}}
+
+    @app.delete(API_PATH + "<guid>")
+    @validate_guid
+    def stop():
+        _logger.debug("Stopping process.")
+        process.stop()
+
+        return {"status": "ok",
+                "message": "Process stopped."}
+
+    @app.get(API_PATH + "<guid>/help")
+    @validate_guid
     def get_help():
         return {"status": "ok",
                 "data": process.get_process_help()}
 
-    @app.get("/status")
+    @app.get(API_PATH + "<guid>/status")
+    @validate_guid
     def get_status():
         return {"status": "ok",
                 "data": {"processor_name": process.get_process_name(),
                          "is_running": process.is_running(),
                          "parameters": get_parameters()["data"]}}
 
-    @app.get("/statistics")
+    @app.get(API_PATH + "<guid>/statistics")
+    @validate_guid
     def get_statistics():
         return {"status": "ok",
                 "data": {"statistics": process.get_statistics()}}
 
-    @app.get("/statistics_raw")
+    @app.get(API_PATH + "<guid>/statistics_raw")
+    @validate_guid
     def get_statistics_raw():
         return {"status": "ok",
                 "data": {"processing_times": process.get_statistics_raw()}}
 
-    @app.get("/parameters")
+    @app.get(API_PATH + "<guid>/parameters")
+    @validate_guid
     def get_parameters():
         return {"status": "ok",
                 "data": process.get_parameters()}
 
-    @app.post("/parameters")
+    @app.post(API_PATH + "<guid>/parameters")
+    @validate_guid
     def set_parameter():
         for parameter in request.json.items():
             _logger.debug("Passing parameter '%s'='%s' to external process." % parameter)
@@ -59,22 +104,6 @@
         return {"status": "ok",
                 "message": "Parameters set successfully."}
 
-    @app.get("/start")
-    def start():
-        _logger.debug("Starting process.")
-        process.start()
-
-        return {"status": "ok",
-                "message": "Process started."}
-
-    @app.get("/stop")
-    def stop():
-        _logger.debug("Stopping process.")
-        process.stop()
-
-        return {"status": "ok",
-                "message": "Process stopped."}
-
     @app.get("/static/<filename:path>")
     def get_static(filename):
         return static_file(filename=filename, root=static_root_path)
@@ -84,6 +113,7 @@
         response.content_type = 'application/json'
         response.status = 200
 
+        _logger.error(str(error.exception))
         return json.dumps({"status": "error",
                            "message": str(error.exception)})
 
Index: mflow_rest_api/static/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mflow_rest_api/static/index.js	(date 1487606915000)
+++ mflow_rest_api/static/index.js	(revision )
@@ -1,72 +1,4 @@
-var NotificationClient = (function(){
-    var self = {};
-
-    self.success = function(message){
-        $.notify(message, "success");
-    };
-
-    self.warn = function(message){
-        console.warn(message);
-        $.notify(message, "warn");
-    };
-
-    self.error = function(message){
-        console.error(message);
-        $.notify(message, "error");
-    };
-
-    return self;
-})();
-
-var APIClient = (function(){
-    var self = {};
-
-    var verify_response = function(response, callback_function){
-        if( response.status == "ok" ){
-            callback_function(response.data);
-        } else {
-            NotificationClient.error(response.message);
-        }
-    };
-
-    var get_request = function(url){
-        return function(callback_function){
-            $.get( url )
-                .done(function( response ){
-                    verify_response(response, callback_function);
-                })
-                .fail(function( response ){
-                    NotificationClient.error(response.message);
-                });
-        };
-    };
-
-    self.get_help = get_request("help");
-    self.get_status = get_request("status");
-    self.get_parameters = get_request("parameters");
-    self.get_statistics = get_request("statistics");
-    self.start = get_request("start");
-    self.stop = get_request("stop");
-
-    self.set_parameters = function(json_string, callback_function){
-        $.ajax({
-            url: 'parameters',
-            type: 'POST',
-            data: json_string,
-            dataType: 'json',
-            contentType: "application/json",
-            success: function(response){
-                verify_response(response, callback_function);
-            },
-            error: function(response){
-                NotificationClient.error(response.message);
-            }
-        });
-    };
-
-    return self;
-})();
-
+// Load all the resources.
 var display_process_data = function(){
     APIClient.get_status(function(data){
 
@@ -90,6 +22,10 @@
 
         $("#processor_statistics").html(statistics_html);
     });
+
+    APIClient.get_help(function(data){
+        $("#processor_help").text(data);
+    });
 };
 
 
@@ -117,9 +53,9 @@
         });
     });
 
-    APIClient.get_help(function(data){
-        $("#processor_help").text(data);
-    });
-
-    display_process_data();
+    // Obtain the process id and display the data if available.
+    APIClient.get_process_id(function(data){
+        APIClient.process_id = data.process_id
+        display_process_data();
+    });
 });
\ No newline at end of file
Index: mflow_rest_api/static/rest_client.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mflow_rest_api/static/rest_client.js	(revision )
+++ mflow_rest_api/static/rest_client.js	(revision )
@@ -0,0 +1,66 @@
+var APIClient = (function(){
+    var self = {};
+    self.api_path = "/api/v1/"
+    self.process_id = ""
+
+    var verify_response = function(response, callback_function){
+        if( response.status == "ok" ){
+            callback_function(response.data);
+        } else {
+            NotificationClient.error(response.message);
+        }
+    };
+
+    var construct_url = function(url, is_api_call, include_process_id){
+        return function(){
+            url_base = "";
+
+            if ( is_api_call ){
+                url_base += self.api_path;
+            };
+            if ( include_process_id ){
+                url_base += self.process_id;
+            };
+
+            return complete_url + url;
+        }
+    }
+
+    var get_request = function(url_provider){
+        return function(callback_function){
+            $.get(url_provider())
+                .done(function( response ){
+                    verify_response(response, callback_function);
+                })
+                .fail(function( response ){
+                    NotificationClient.error(response.message);
+                });
+        };
+    };
+
+    self.get_id = get_request(construct_url("", true, false))
+    self.get_help = get_request(construct_url("help", true, true));
+    self.get_status = get_request("status");
+    self.get_parameters = get_request("parameters");
+    self.get_statistics = get_request("statistics");
+    self.start = get_request("start");
+    self.stop = get_request("stop");
+
+    self.set_parameters = function(json_string, callback_function){
+        $.ajax({
+            url: 'parameters',
+            type: 'POST',
+            data: json_string,
+            dataType: 'json',
+            contentType: "application/json",
+            success: function(response){
+                verify_response(response, callback_function);
+            },
+            error: function(response){
+                NotificationClient.error(response.message);
+            }
+        });
+    };
+
+    return self;
+})();
\ No newline at end of file
